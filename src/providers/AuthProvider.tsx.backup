// src/providers/AuthProvider.tsx (CREATE THIS FILE)
import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';

interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  type: 'MEMBER' | 'PROFESSIONAL' | 'ADMIN';
  currentPhase: 'PHASE1' | 'PHASE2' | 'PHASE3';
  healthGoals: string[];
  startDate: string;
  healthProfile?: {
    age?: number;
    gender?: string;
    weight?: number;
    height?: number;
    sleepGoal?: number;
    stressLevel?: number;
    energyLevel?: number;
    digestiveHealth?: number;
    fastingExperience?: string;
  };
}

interface AuthContextType {
  user: User | null;
  token: string | null;
  login: (email: string, password: string) => Promise<void>;
  register: (data: RegisterData) => Promise<void>;
  logout: () => void;
  loading: boolean;
  isAuthenticated: boolean;
}

interface RegisterData {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  type?: 'MEMBER' | 'PROFESSIONAL' | 'ADMIN';
  age?: number;
  gender?: string;
  healthGoals?: string[];
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const savedToken = localStorage.getItem('wellness_token');
        if (savedToken) {
          setToken(savedToken);
          const userData = await getCurrentUser(savedToken);
          setUser(userData);
        }
      } catch (error) {
        console.error('Auth check failed:', error);
        logout();
      } finally {
        setLoading(false);
      }
    };

    checkAuth();
  }, []);

  const login = async (email: string, password: string) => {
    try {
      const response = await fetch(`${API_BASE_URL}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Login failed');
      }

      const result = await response.json();
      setToken(result.data.token);
      setUser(result.data.user);
      localStorage.setItem('wellness_token', result.data.token);
      localStorage.setItem('wellness_user', JSON.stringify(result.data.user));
    } catch (error: any) {
      console.error('Login error:', error);
      throw error;
    }
  };

  const register = async (data: RegisterData) => {
    try {
      const response = await fetch(`${API_BASE_URL}/auth/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Registration failed');
      }

      const result = await response.json();
      setToken(result.data.token);
      setUser(result.data.user);
      localStorage.setItem('wellness_token', result.data.token);
      localStorage.setItem('wellness_user', JSON.stringify(result.data.user));
    } catch (error: any) {
      console.error('Registration error:', error);
      throw error;
    }
  };

  const logout = () => {
    setToken(null);
    setUser(null);
    localStorage.removeItem('wellness_token');
    localStorage.removeItem('wellness_user');
  };

  const getCurrentUser = async (authToken: string): Promise<User> => {
    const response = await fetch(`${API_BASE_URL}/auth/me`, {
      headers: { 'Authorization': `Bearer ${authToken}` },
    });

    if (!response.ok) {
      throw new Error('Failed to fetch user data');
    }

    const result = await response.json();
    return result.data;
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        token,
        login,
        register,
        logout,
        loading,
        isAuthenticated: !!user && !!token,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

// src/services/wellnessService.ts (CREATE THIS FILE)
class WellnessService {
  private apiCall = async (endpoint: string, options: RequestInit = {}) => {
    const token = localStorage.getItem('wellness_token');
    const url = `${import.meta.env.VITE_API_URL || 'http://localhost:3001'}${endpoint}`;
    
    const headers = {
      'Content-Type': 'application/json',
      ...options.headers,
    };

    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(url, { ...options, headers });

    if (response.status === 401) {
      localStorage.removeItem('wellness_token');
      localStorage.removeItem('wellness_user');
      window.location.reload();
      throw new Error('Authentication required');
    }

    if (!response.ok) {
      const error = await response.json().catch(() => ({ error: 'Request failed' }));
      throw new Error(error.error || 'Request failed');
    }

    return response.json();
  };

  async getBehavioralDailyPlan(forceRegenerate = false) {
    try {
      const result = await this.apiCall('/api/behavioral/daily-plan', {
        method: 'POST',
        body: JSON.stringify({
          forceRegenerate,
          healthMetrics: {
            sleepHours: 7,
            stressLevel: 5,
            energyLevel: 6,
            digestiveHealth: 7
          }
        }),
      });

      return result.data;
    } catch (error: any) {
      console.error('Failed to fetch behavioral daily plan:', error);
      throw error;
    }
  }

  async completeHabit(habitId: string, completionData: any) {
    try {
      const result = await this.apiCall(`/api/habits/${habitId}/complete`, {
        method: 'POST',
        body: JSON.stringify({ completed: true, ...completionData }),
      });
      return result.data;
    } catch (error: any) {
      console.error('Failed to complete habit:', error);
      throw error;
    }
  }
}

export const wellnessService = new WellnessService();

// screens/AuthScreen.tsx (CREATE THIS FILE)
// import React, { useState } from 'react';
import { Button } from '../components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { useAuth } from '../src/providers/AuthProvider';
import { AlertCircle, Loader2, Heart, Brain, Target } from 'lucide-react';

export function AuthScreen() {
  const [isLogin, setIsLogin] = useState(true);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [age, setAge] = useState('');
  const [gender, setGender] = useState('');
  const [userType, setUserType] = useState<'MEMBER' | 'PROFESSIONAL'>('MEMBER');
  
  const { login, register } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    try {
      if (isLogin) {
        await login(email, password);
      } else {
        await register({
          email,
          password,
          firstName,
          lastName,
          type: userType,
          age: age ? parseInt(age) : undefined,
          gender: gender || undefined,
          healthGoals: ['improve-gut-health', 'increase-energy']
        });
      }
    } catch (error: any) {
      setError(error.message || 'Authentication failed');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-4">
      <div className="w-full max-w-md space-y-6">
        
        <div className="text-center space-y-2">
          <div className="flex items-center justify-center space-x-2 mb-4">
            <div className="bg-gradient-to-r from-blue-600 to-purple-600 p-3 rounded-full">
              <Brain className="h-8 w-8 text-white" />
            </div>
          </div>
          <h1 className="text-3xl font-bold text-gray-900">WellnessAI</h1>
          <p className="text-gray-600">
            {isLogin 
              ? 'Welcome back to your wellness journey' 
              : 'Start your personalized GMRP journey'
            }
          </p>
        </div>

        <Card className="shadow-xl border-0">
          <CardHeader className="text-center pb-4">
            <CardTitle className="text-xl font-semibold text-gray-900">
              {isLogin ? 'Sign In' : 'Create Account'}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              
              {!isLogin && (
                <>
                  <div className="grid grid-cols-2 gap-3">
                    <div>
                      <label className="text-sm font-medium">First Name</label>
                      <input
                        type="text"
                        value={firstName}
                        onChange={(e) => setFirstName(e.target.value)}
                        className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md"
                        required
                      />
                    </div>
                    <div>
                      <label className="text-sm font-medium">Last Name</label>
                      <input
                        type="text"
                        value={lastName}
                        onChange={(e) => setLastName(e.target.value)}
                        className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md"
                        required
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-3">
                    <div>
                      <label className="text-sm font-medium">Age</label>
                      <input
                        type="number"
                        value={age}
                        onChange={(e) => setAge(e.target.value)}
                        className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md"
                        min="18"
                        max="100"
                      />
                    </div>
                    <div>
                      <label className="text-sm font-medium">Gender</label>
                      <select
                        value={gender}
                        onChange={(e) => setGender(e.target.value)}
                        className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md"
                      >
                        <option value="">Select...</option>
                        <option value="male">Male</option>
                        <option value="female">Female</option>
                        <option value="non-binary">Non-binary</option>
                        <option value="prefer-not-to-say">Prefer not to say</option>
                      </select>
                    </div>
                  </div>

                  <div>
                    <label className="text-sm font-medium">Account Type</label>
                    <div className="mt-2 grid grid-cols-2 gap-3">
                      <button
                        type="button"
                        onClick={() => setUserType('MEMBER')}
                        className={`p-3 rounded-lg border text-sm font-medium ${
                          userType === 'MEMBER'
                            ? 'bg-blue-50 border-blue-200 text-blue-700'
                            : 'bg-gray-50 border-gray-200 text-gray-600'
                        }`}
                      >
                        Member
                      </button>
                      <button
                        type="button"
                        onClick={() => setUserType('PROFESSIONAL')}
                        className={`p-3 rounded-lg border text-sm font-medium ${
                          userType === 'PROFESSIONAL'
                            ? 'bg-blue-50 border-blue-200 text-blue-700'
                            : 'bg-gray-50 border-gray-200 text-gray-600'
                        }`}
                      >
                        Professional
                      </button>
                    </div>
                  </div>
                </>
              )}
              
              <div>
                <label className="text-sm font-medium">Email</label>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md"
                  required
                />
              </div>
              
              <div>
                <label className="text-sm font-medium">Password</label>
                <input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md"
                  required
                  minLength={8}
                />
              </div>

              {error && (
                <div className="flex items-center space-x-2 text-red-600 text-sm bg-red-50 p-3 rounded-lg">
                  <AlertCircle className="h-4 w-4" />
                  <span>{error}</span>
                </div>
              )}

              <Button 
                type="submit" 
                className="w-full bg-gradient-to-r from-blue-600 to-purple-600" 
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    {isLogin ? 'Signing In...' : 'Creating Account...'}
                  </>
                ) : (
                  isLogin ? 'Sign In' : 'Create Account'
                )}
              </Button>

              <div className="text-center pt-4">
                <button
                  type="button"
                  onClick={() => setIsLogin(!isLogin)}
                  className="text-sm text-blue-600 hover:text-blue-700 font-medium"
                >
                  {isLogin 
                    ? "Don't have an account? Sign up" 
                    : 'Already have an account? Sign in'
                  }
                </button>
              </div>
            </form>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}